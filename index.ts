import dotenv from 'dotenv';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º dotenv –ü–ï–†–ï–î –≤—Å–µ–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
dotenv.config();

import express from 'express';
import http from 'http';
import cors from 'cors';
import { getTask, getTaskQuickly, triggerN8nWebhook } from './bumesApi';
import fs from 'fs';


// —Å–ø—Å–±–∏–æ –∞ –¥–∞–π—Ç–µ –µ–≥–æ –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å


// aleks.evdokimov+ai-bot-client-dogim@gmail.com
// 1234567

const app = express();
const port = process.env.PORT || 4000;
const CHECK_INTERVAL = parseInt(process.env.CHECK_INTERVAL || '30000'); // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
let isChecking = false;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è lastTaskId –∏–∑ —Ñ–∞–π–ª–∞
const readLastTaskId = (): number => {
  try {
    const data = fs.readFileSync('task.json', 'utf8');
    const json = JSON.parse(data);
    return json.lastTaskId;
  } catch (error) {
    console.error('Error reading lastTaskId:', error);
    return 0;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastTaskId –≤ —Ñ–∞–π–ª–µ
const updateLastTaskId = (taskId: number): void => {
  try {
    const data = JSON.stringify({ lastTaskId: taskId }, null, 2);
    fs.writeFileSync('task.json', data);
  } catch (error) {
    console.error('Error updating lastTaskId:', error);
  }
};

//default get route
app.get('/', (req, res) => {
  res.send('TEST API AI BOT!!!');
});

//ping
app.get('/ping', (req, res) => {
  res.send('PONG');
});

const server = http.createServer(app);


server.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  setInterval(async () => {
    // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    //curernt date with time and seconds
    const currentDate = new Date();
    const currentDateString = currentDate.toLocaleString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
    console.log('‚è∞ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:', currentDateString);
    if (isChecking) {
      console.log('‚è≥ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—â–µ –∏–¥–µ—Ç...');
      return;
    }

    try {
      isChecking = true;
      console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É...=====================>>>>>>>>>>>>>>>>');
      const task = await getTask();
      console.log('üì¶ –ü–û–õ–£–ß–ï–ù–ê –ó–ê–î–ê–ß–ê –î–õ–Ø –†–ê–ë–û–¢–´:', task);
      
      if (task && Object.keys(task).length > 0 ) {
        let taskId = task.data.id;
        console.log('üìù –ó–∞–¥–∞—á–∞ ID:', taskId);
        const lastTaskId = readLastTaskId();
        console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π ID:', lastTaskId);
        if (taskId !== lastTaskId) {
          //update lastTaskId!! 
          updateLastTaskId(taskId);
          console.log('‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ—Ä–≥–∞–µ–º –≤–µ–±—Ö—É–∫');
          let res = await triggerN8nWebhook();
          console.log('üéØ –í–µ–±—Ö—É–∫ —Å—Ä–∞–±–æ—Ç–∞–ª', res);
          
          console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω lastTaskId:', taskId);
        } else {
          console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É - ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º');
        }
      } else {
        console.log('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
      isChecking = false;
      console.log('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }, CHECK_INTERVAL);


});


